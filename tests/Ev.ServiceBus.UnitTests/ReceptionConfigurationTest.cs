using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Ev.ServiceBus.Abstractions;
using Ev.ServiceBus.Management;
using Ev.ServiceBus.Reception;
using Ev.ServiceBus.UnitTests.Helpers;
using FluentAssertions;
using Microsoft.Azure.ServiceBus;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using Xunit;
using Composer = Ev.ServiceBus.UnitTests.Helpers.Composer;

namespace Ev.ServiceBus.UnitTests
{
    public class ReceptionConfigurationTest
    {
        [Fact]
        public void CustomizePayloadTypeId_ArgumentNullException()
        {
            var services = new ServiceCollection();
            Assert.Throws<ArgumentNullException>(() =>
            {
                services.RegisterServiceBusReception()
                    .FromSubscription("topic", "sub",
                        builder =>
                        {
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>()
                                .CustomizePayloadTypeId(null);
                        });
            });
        }

        [Fact]
        public void PayloadTypeIdIsAutoGenerated()
        {
            var services = new ServiceCollection();
            services.RegisterServiceBusReception()
                .FromSubscription("topic", "sub",
                    builder =>
                    {
                        var reg = builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                        reg.PayloadTypeId.Should().Be("SubscribedEvent");
                    });
        }

        [Fact]
        public async Task HandlerCannotReceiveFromTheSameSubscriptionTwice()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusReception()
                    .FromSubscription("topicName", "subscriptionName",
                        builder =>
                        {
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                        });
            });

            var exception = await Assert.ThrowsAsync<DuplicateSubscriptionHandlerDeclarationException>(async () =>
            {
                await composer.Compose();
            });
            exception.Message.Should().NotBeNull();
            exception.Message.Should().ContainAll("SubscribedEvent", "Subscription", "SubscribedEventHandler");
        }

        [Fact]
        public async Task CanRegisterFromTheSameQueueTwice_Case1()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(1);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameQueueTwice_Case2()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusQueue("queueName");

                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(1);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameQueueTwice_Case3()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusQueue("queueName").WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(1);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameQueueTwice_Case4()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusQueue("queueName")
                    .WithConnection("anotherConnectionString")
                    .WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(2);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName_2");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameQueueTwice_Case5()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusQueue("queueName")
                    .WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.CustomizeConnection("anotherConnectionString");

                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(2);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName_2");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameQueueTwice_Case6()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusQueue("queueName")
                    .WithConnection("anotherConnectionString")
                    .WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.CustomizeConnection("anotherConnectionString2");

                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromQueue("queueName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(3);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName_2");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("queueName_3");
                    receiver.ClientType.Should().Be(ClientType.Queue);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameSubscriptionTwice_Case1()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(1);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameSubscriptionTwice_Case2()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusSubscription("topicName", "subscriptionName");

                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(1);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameSubscriptionTwice_Case3()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusSubscription("topicName", "subscriptionName").WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(1);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameSubscriptionTwice_Case4()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusSubscription("topicName", "subscriptionName")
                    .WithConnection("anotherConnectionString")
                    .WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(2);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName_2");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameSubscriptionTwice_Case5()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusSubscription("topicName", "subscriptionName")
                    .WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.CustomizeConnection("anotherConnectionString");

                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(2);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName_2");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                });
        }

        [Fact]
        public async Task CanRegisterFromTheSameSubscriptionTwice_Case6()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusSubscription("topicName", "subscriptionName")
                    .WithConnection("anotherConnectionString")
                    .WithCustomMessageHandler<CustomMessageHandler>();

                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.CustomizeConnection("anotherConnectionString2");

                    builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                });
                services.RegisterServiceBusReception().FromSubscription("topicName", "subscriptionName", builder =>
                {
                    builder.RegisterReception<NoiseEvent, NoiseHandler>();
                });
            });

            await composer.Compose();

            var registry = composer.Provider.GetRequiredService<IServiceBusRegistry>() as ServiceBusRegistry;
            var receivers = registry!.GetAllReceivers();
            receivers.Length.Should().Be(3);
            receivers.Should().SatisfyRespectively(
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName_2");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                },
                receiver =>
                {
                    receiver.ResourceId.Should().Be("topicName/Subscriptions/subscriptionName_3");
                    receiver.ClientType.Should().Be(ClientType.Subscription);
                });
        }

        [Fact]
        public async Task HandlerCannotReceiveFromTheSameQueueTwice()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusReception()
                    .FromQueue("queueName",
                        builder =>
                        {
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>();
                        });
            });

            var exception = await Assert.ThrowsAsync<DuplicateSubscriptionHandlerDeclarationException>(async () =>
            {
                await composer.Compose();
            });
            exception.Message.Should().NotBeNull();
            exception.Message.Should().ContainAll("Queue", "SubscribedEvent", "SubscribedEventHandler");
        }

        [Fact]
        public async Task PayloadTypeIdCannotBeSetTwice()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusReception()
                    .FromQueue("queueName",
                        builder =>
                        {
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>()
                                .CustomizePayloadTypeId("testEvent");
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler2>()
                                .CustomizePayloadTypeId("testEvent");
                        });
            });

            var exception = await Assert.ThrowsAsync<DuplicateEvenTypeIdDeclarationException>(async () =>
            {
                await composer.Compose();
            });
            exception.Message.Should().NotBeNull();
            exception.Message.Should().ContainAll("Queue", "SubscribedEventHandler", "SubscribedEventHandler2", "testEvent");
        }

        [Fact]
        public void ReceiveFromQueue_ArgumentCannotBeNull()
        {
            var services = new ServiceCollection();

            services.AddServiceBus<PayloadSerializer>(_ => {});

            Assert.Throws<ArgumentNullException>(() =>
            {
                services.RegisterServiceBusReception().FromQueue(null, builder => { });
            });
        }

        [Theory]
        [InlineData(null, "subscriptionName")]
        [InlineData("topicName", null)]
        public void ReceiveFromSubscription_ArgumentCannotBeNull(string topicName, string subscriptionName)
        {
            var services = new ServiceCollection();

            services.AddServiceBus<PayloadSerializer>(_ => {});

            Assert.Throws<ArgumentNullException>(() =>
            {
                services.RegisterServiceBusReception()
                    .FromSubscription(topicName, subscriptionName, builder => { });
            });
        }

        [Fact]
        public async Task CustomizeMessageHandling_ChangesAreAppliedToClient()
        {
            var composer = new Composer();

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusReception()
                    .FromSubscription("testTopic", "testSubscription",
                        builder =>
                        {
                            builder.CustomizeMessageHandling(3, TimeSpan.FromDays(3));
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>()
                                .CustomizePayloadTypeId("MyEvent");
                        });
            });

            await composer.Compose();

            var clients = composer
                .SubscriptionFactory
                .GetAllRegisteredClients();

            var client = clients.First(o => o.ClientName == "testSubscription");
            client.Mock.Verify(o => o.RegisterMessageHandler(It.IsAny<Func<Message, CancellationToken, Task>>(),
                It.Is<MessageHandlerOptions>(handlerOptions =>
                    handlerOptions.AutoComplete
                    && handlerOptions.MaxConcurrentCalls == 3
                    && handlerOptions.MaxAutoRenewDuration == TimeSpan.FromDays(3))), Times.Once);
        }

        [Fact]
        public async Task CustomizeConnection_ChangesAreAppliedToClient()
        {
            var composer = new Composer();

            var factory = new Mock<IClientFactory<SubscriptionOptions, ISubscriptionClient>>();
            factory.Setup(o => o.Create(It.IsAny<SubscriptionOptions>(),
                    It.Is<ConnectionSettings>(settings => settings.ConnectionString == "newConnectionString"
                                                          && settings.ReceiveMode == ReceiveMode.ReceiveAndDelete)))
                .Returns(new Mock<ISubscriptionClient>().Object);

            composer.WithAdditionalServices(services =>
            {
                services.RegisterServiceBusReception()
                    .FromSubscription("testTopic", "testSubscription",
                        builder =>
                        {
                            builder.CustomizeConnection("newConnectionString", ReceiveMode.ReceiveAndDelete, RetryPolicy.NoRetry);
                            builder.RegisterReception<SubscribedEvent, SubscribedEventHandler>()
                                .CustomizePayloadTypeId("MyEvent");
                        });
                ServiceCollectionHelpers.OverrideClientFactory(services, factory.Object);
            });

            await composer.Compose();
            factory.VerifyAll();
        }

        public class SubscribedEventHandler2 : IMessageReceptionHandler<SubscribedEvent>
        {
            public Task Handle(SubscribedEvent @event, CancellationToken cancellationToken)
            {
                return Task.CompletedTask;
            }
        }
    }

    public class CustomMessageHandler : IMessageHandler
    {
        public Task HandleMessageAsync(MessageContext context)
        {
            return Task.CompletedTask;
        }
    }
}
